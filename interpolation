#include <iostream>
#include <map>

double linearInterpolator(std::map<double, double>& s, double x)
{
    int j=0;
    double x0=0.0;
    double x1=0.0;

    if (s.size()==1)
    {
        return (--s.end())->second;
    }
    else
    {
        for (auto pair : s)
        {
            
            
            
            if (pair.first > x && pair.first == (--s.begin())->first)
            {
                x0 = pair.first;
            }
            else if (pair.first < x && pair.first != (--s.end())->first)
                x0 = pair.first;
            else if (pair.first < x && pair.first == (--s.end())->first)
                x1 = pair.first;
            else if (pair.first >= x && j==0)
            {
                x1 = pair.first;
                j=1;
            }
        }

        double y0 = s[x0];
        double y1 = s[x1];

        // Equation of a line: (x1-x0)*(y-y0)=(y1-y0)*(x-x0)

        if (x1 != x0)
            return (y1-y0)*(x-x0)/(x1-x0) + y0;
        else
        {
            std::cout << "x values must be different." << std::endl;
            return -1.0;
        }
    }
}

int main()
{
    //std::set internally store elements in balanced binary tree.
    std::map<double, double> s = {{1, 11}, {2, 12}, {3, 13}};

    std::cout << linearInterpolator(s, -10) << std::endl;
    
    return 0;
}
